From d81aad780c67e8737ceee60ca58742dc8df72648 Mon Sep 17 00:00:00 2001
From: sharkautarch <128002472+sharkautarch@users.noreply.github.com>
Date: Sun, 23 Jun 2024 10:53:50 -0400
Subject: [PATCH] use latest upstream wlroots

---
 .gitmodules          |  7 ++++---
 src/rendervulkan.cpp | 37 +++++++++++++++++--------------------
 src/wlserver.cpp     | 18 +++++++++++-------
 src/wlserver.hpp     | 14 ++++++++++++--
 subprojects/wlroots  |  2 +-
 5 files changed, 45 insertions(+), 33 deletions(-)

diff --git a/.gitmodules b/.gitmodules
index ec7d4e4..34e81f5 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,6 +1,3 @@
-[submodule "subprojects/wlroots"]
-	path = subprojects/wlroots
-	url = https://github.com/Joshua-Ashton/wlroots.git
 [submodule "subprojects/libliftoff"]
 	path = subprojects/libliftoff
 	url = https://gitlab.freedesktop.org/emersion/libliftoff.git
@@ -19,3 +16,7 @@
 [submodule "thirdparty/SPIRV-Headers"]
 	path = thirdparty/SPIRV-Headers
 	url = https://github.com/KhronosGroup/SPIRV-Headers/
+[submodule "subprojects/wlroots"]
+	path = subprojects/wlroots
+	url = https://gitlab.freedesktop.org/wlroots/wlroots.git
+	branch = master
\ No newline at end of file
diff --git a/src/rendervulkan.cpp b/src/rendervulkan.cpp
index 711beb5..0f00b68 100644
--- a/src/rendervulkan.cpp
+++ b/src/rendervulkan.cpp
@@ -128,7 +128,7 @@ static bool Contains( const std::span<const T> x, T value )
 }
 
 static std::map< VkFormat, std::map< uint64_t, VkDrmFormatModifierPropertiesEXT > > DRMModifierProps = {};
-static std::vector< uint32_t > sampledShmFormats{};
+static struct wlr_drm_format_set sampledShmFormats = {};
 static struct wlr_drm_format_set sampledDRMFormats = {};
 
 static LogScope vk_log("vulkan");
@@ -2588,8 +2588,12 @@ bool vulkan_init_format(VkFormat format, uint32_t drmFormat)
 		return false;
 	}
 
-	if ( std::find( sampledShmFormats.begin(), sampledShmFormats.end(), drmFormat ) == sampledShmFormats.end() ) 
+	if (sampledShmFormats.formats == nullptr 
 		sampledShmFormats.push_back( drmFormat );
+			|| std::none_of( sampledShmFormats.formats, sampledShmFormats.formats+sampledShmFormats.len, [=](wlr_drm_format format) { return format.format == drmFormat;} ) ) 
+	{ 
+		wlr_drm_format_set_add( &sampledShmFormats, drmFormat, DRM_FORMAT_MOD_INVALID );
+	}
 
 	if ( !g_device.supportsModifiers() )
 	{
@@ -3990,21 +3994,16 @@ static const struct wlr_texture_impl texture_impl = {
 	.destroy = texture_destroy,
 };
 
-static uint32_t renderer_get_render_buffer_caps( struct wlr_renderer *renderer )
+static const struct wlr_drm_format_set *renderer_get_texture_formats(struct wlr_renderer *wlr_renderer, uint32_t buffer_caps) {
 {
+	if (buffer_caps & WLR_BUFFER_CAP_DMABUF) {
 	return 0;
-}
-
-static const uint32_t *renderer_get_shm_texture_formats( struct wlr_renderer *wlr_renderer, size_t *len
- )
-{
-	*len = sampledShmFormats.size();
-	return sampledShmFormats.data();
-}
-
-static const struct wlr_drm_format_set *renderer_get_dmabuf_texture_formats( struct wlr_renderer *wlr_renderer )
-{
-	return &sampledDRMFormats;
+		return &sampledDRMFormats;
+	} else if (buffer_caps & WLR_BUFFER_CAP_DATA_PTR) {
+		return &sampledShmFormats;
+	} else {
+		return nullptr;
+	}
 }
 
 static int renderer_get_drm_fd( struct wlr_renderer *wlr_renderer )
@@ -4028,18 +4027,17 @@ static struct wlr_render_pass *renderer_begin_buffer_pass( struct wlr_renderer *
 }
 
 static const struct wlr_renderer_impl renderer_impl = {
-	.get_shm_texture_formats = renderer_get_shm_texture_formats,
-	.get_dmabuf_texture_formats = renderer_get_dmabuf_texture_formats,
+	.get_texture_formats = renderer_get_texture_formats,
 	.get_drm_fd = renderer_get_drm_fd,
-	.get_render_buffer_caps = renderer_get_render_buffer_caps,
 	.texture_from_buffer = renderer_texture_from_buffer,
 	.begin_buffer_pass = renderer_begin_buffer_pass,
 };
 
 struct wlr_renderer *vulkan_renderer_create( void )
 {
+	static constexpr uint32_t render_buffer_caps = WLR_BUFFER_CAP_DMABUF | WLR_BUFFER_CAP_DATA_PTR | WLR_BUFFER_CAP_SHM;
 	VulkanRenderer_t *renderer = new VulkanRenderer_t();
-	wlr_renderer_init(&renderer->base, &renderer_impl);
+	wlr_renderer_init(&renderer->base, &renderer_impl, render_buffer_caps);
 	return &renderer->base;
 }
 
diff --git a/src/wlserver.cpp b/src/wlserver.cpp
index 776e014..2964ade 100644
--- a/src/wlserver.cpp
+++ b/src/wlserver.cpp
@@ -25,7 +25,6 @@
 #include <wlr/backend/multi.h>
 #include <wlr/interfaces/wlr_keyboard.h>
 #include <wlr/render/wlr_renderer.h>
-#include <wlr/render/timeline.h>
 #include <wlr/types/wlr_compositor.h>
 #include <wlr/types/wlr_keyboard.h>
 #include <wlr/types/wlr_pointer.h>
@@ -37,7 +36,7 @@
 #include <wlr/types/wlr_xdg_shell.h>
 #include <wlr/types/wlr_relative_pointer_v1.h>
 #include <wlr/types/wlr_pointer_constraints_v1.h>
-#include <wlr/types/wlr_linux_drm_syncobj_v1.h>
+#include <wlr/render/drm_syncobj.h>
 #include <wlr/types/wlr_layer_shell_v1.h>
 #include <wlr/util/region.h>
 #include "wlr_end.hpp"
@@ -70,6 +69,11 @@
 #include <list>
 #include <set>
 
+extern "C" {
+   __attribute__((visibility("hidden"))) struct wlr_linux_drm_syncobj_surface_v1_state * wlr_linux_drm_syncobj_v1_get_surface_state(struct wlr_surface *wlr_surface);
+   __attribute__((visibility("hidden"))) struct wlr_linux_drm_syncobj_manager_v1 *wlr_linux_drm_syncobj_manager_v1_create(struct wl_display *display, uint32_t version, int drm_fd);
+}
+
 static LogScope wl_log("wlserver");
 bool pending_gesture_x = false;
 bool pending_gesture_y = false;
@@ -124,7 +128,7 @@ void GamescopeTimelinePoint::Release()
 
 	//fprintf( stderr, "Release: %lu\n", ulPoint );
 	drmSyncobjTimelineSignal( pTimeline->drm_fd, &pTimeline->handle, &ulPoint, 1 );
-	wlr_render_timeline_unref( pTimeline );
+	wlr_drm_syncobj_timeline_unref( pTimeline );
 }
 
 //
@@ -136,7 +140,7 @@ void GamescopeTimelinePoint::Release()
 
 static std::optional<GamescopeAcquireTimelineState> TimelinePointToEventFd( const std::optional<GamescopeTimelinePoint>& oPoint )
 {
-	if (!oPoint)
+	if (!oPoint || !(oPoint->pTimeline) )
 		return std::nullopt;
 
 	uint64_t uSignalledPoint = 0;
@@ -187,8 +191,8 @@ std::optional<ResListEntry_t> PrepareCommit( struct wlr_surface *surf, struct wl
 
 	const auto& pFeedback = wlserver_surface_swapchain_feedback(surf);
 
-	wlr_linux_drm_syncobj_surface_v1_state *pSyncState =
-		wlr_linux_drm_syncobj_v1_get_surface_state( wlserver.wlr.drm_syncobj_manager_v1, surf );
+	struct wlr_linux_drm_syncobj_surface_v1_state *pSyncState =
+		wlr_linux_drm_syncobj_v1_get_surface_state( surf );
 
 	auto oAcquirePoint = !pSyncState ? std::nullopt : std::optional<GamescopeTimelinePoint> {
 			std::in_place_t{},
@@ -205,7 +209,7 @@ std::optional<ResListEntry_t> PrepareCommit( struct wlr_surface *surf, struct wl
 		}
 
 		oReleasePoint.emplace(
-			  wlr_render_timeline_ref( pSyncState->release_timeline ),
+			  wlr_drm_syncobj_timeline_ref( pSyncState->release_timeline ),
 			  pSyncState->release_point 
 		);
 	}
diff --git a/src/wlserver.hpp b/src/wlserver.hpp
index 07675fe..16e6665 100644
--- a/src/wlserver.hpp
+++ b/src/wlserver.hpp
@@ -2,6 +2,16 @@
 
 #pragma once
 
+//two function prototypes from wlr/types/wlr_linux_drm_syncobj_v1.h would cause linker errors 
+//due to c++ vs c linkage weirdness
+//need to ignore the prototypes from the header, and instead use versions w/ 'extern "C"' :
+#define wlr_linux_drm_syncobj_v1_get_surface_state wlr_linux_drm_syncobj_v1_get_surface_state_C_LINKAGE
+#define wlr_linux_drm_syncobj_manager_v1_create wlr_linux_drm_syncobj_manager_v1_create_C_LINKAGE
+#include <wlr/types/wlr_linux_drm_syncobj_v1.h>
+
+#undef wlr_linux_drm_syncobj_v1_get_surface_state
+#undef wlr_linux_drm_syncobj_manager_v1_create
+
 #include <wayland-server-core.h>
 #include <atomic>
 #include <vector>
@@ -42,8 +52,8 @@ struct wlserver_vk_swapchain_feedback
 
 struct GamescopeTimelinePoint
 {
-	struct wlr_render_timeline *pTimeline = nullptr;
-	uint64_t ulPoint = 0;
+	decltype(wlr_linux_drm_syncobj_surface_v1_state::acquire_timeline) pTimeline = nullptr;
+	decltype(wlr_linux_drm_syncobj_surface_v1_state::acquire_point) ulPoint = 0;
 
 	void Release();
 };
